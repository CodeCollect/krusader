#MIN_CONFIG(3)

###################################################
#		Check for Konqueror
###################################################

AC_ARG_WITH(konqueror,
    AC_HELP_STRING([--without-konqueror],[build Krusader without support Konqueror's servicemenus [default=with]]),
    [with_konq=$withval],
    [with_konq=yes]
)

if test "$with_konq" != "no"; then
	# check for the headers
	have_libkonq=yes
	KDE_CHECK_HEADER(konq_popupmenu.h, ,[have_libkonq=no] )
	KDE_CHECK_HEADER(konqbookmarkmanager.h, ,[have_libkonq=no] )

	if test "$have_libkonq" = "no"; then
		# if this var is 'yes', the configure-suppery drops a warning.
		# see admin/configure.in.bot.end
		warn_konq=yes
	fi
fi

AM_CONDITIONAL(include_libkonq, test "$have_libkonq" = yes)

###################################################
#		Check for JavaScript
###################################################

AC_ARG_WITH(javascript,
    AC_HELP_STRING([--without-javascript],[build Krusader without JavaScript support [default=with]]),
    [with_js=$withval],
    [with_js=yes]
)

if test "$with_js" != "no"; then
	# check for the header
	have_libkjsembed=yes
	KDE_CHECK_HEADER(kjsembed/kjsembedpart.h, ,[have_libkjsembed=no] )

	if test "$have_libkjsembed" = "no"; then
		# if this var is 'yes', the configure-suppery drops a warning.
		# see admin/configure.in.bot.end
		warn_js=yes
	fi
fi

AM_CONDITIONAL(include_libkjsembed, test "$have_libkjsembed" = yes)

###################################################
#		If our own tar-KIO schould be build
###################################################

AC_ARG_WITH(kiotar,
    AC_HELP_STRING([--with-kiotar],[use our write-enabled version of KDE's tar KIO-Slave [default=without]]),
    [with_tar=$withval],
    [with_tar=no]
)

AM_CONDITIONAL(with_tar, test "$with_tar" != "no")

###################################################

AM_INIT_AUTOMAKE(krusader,1.70.0)
# This adds the RELEASE_NAME-Marco to config.h (where also VERSION is defined).
# It can be used to add a name to a release. If commented out only VERSION is used, see main.cpp
AH_BOTTOM([#define RELEASE_NAME "Round Robin"])

dnl CXXFLAGS="$NOOPT_CXXFLAGS" dnl __kdevelop[noopt]__
dnl CFLAGS="$NOOPT_CFLAGS" dnl __kdevelop[noopt]__
dnl CXXFLAGS="$CXXFLAGS $USE_EXCEPTIONS" dnl __kdevelop[exc]__

dnl KDE_NEED_FLEX dnl __kdevelop__
dnl AC_PROG_YACC dnl __kdevelop__


CPPFLAGS="$CPPFLAGS -D_LARGEFILE64_SOURCE -DKDE_NO_COMPAT -DQT_NO_ASCII_CAST"

